#! /bin/sh
### BEGIN INIT INFO
# Provides:          maradns
# Required-Start:    $remote_fs $network $syslog
# Required-Stop:     $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start and stop maradns
# Description:       maradns is a Domain Name Server (DNS)
#       which translates IP addresses to and from internet names
### END INIT INFO

# Author: Nicholas Bamber <nicholas@periapt.co.uk>

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="domain name server"
NAME=maradns
DAEMON=/usr/sbin/$NAME-svr
LOG_DAEMON=/usr/sbin/$NAME-log
SCRIPTNAME=/etc/init.d/$NAME
WORKING_DIR=/var/run/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{

        #TODO: jail for logger
        # Should really split do_start
        # Need to check reload bug report

	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started

        # Make sure fifo pipe between server and logger is up
        PIPE="$WORKING_DIR/$SERVERNAME.fifo"
        [ -p $PIPE ] || mkfifo --mode 660 $PIPE || return 2
        chown maradns:root $PIPE 

        # Now start the logger
        LOG_PIDFILE="$WORKING_DIR/$SERVERNAME-log.pid"
	if start-stop-daemon --start --quiet --pidfile $LOG_PIDFILE --startas $LOG_DAEMON --test > /dev/null
        then
	    start-stop-daemon --make-pidfile --background --start --quiet --pidfile $LOG_PIDFILE --startas $LOG_DAEMON -- $SERVERNAME
        fi
        sleep 1
        if pidofproc -p $LOG_PIDFILE > /dev/null
        then

            # Now start the actual maradns process
            PIDFILE="$WORKING_DIR/$SERVERNAME.pid"
	    start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null || return 1
	    start-stop-daemon --make-pidfile --background --start --quiet --pidfile $PIDFILE --exec $DAEMON -- $SERVERNAME $rcfile
            sleep 3
            if ! pidofproc -p $PIDFILE > /dev/null
            then
                rm -rf $PIDFILE
                return 2
            fi
        else
            rm -rf $LOG_PIDFILE
            return 2
        fi
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

if [ -z "$SERVERS" ]
then
    log_action_mesg "No maradns servers configured"
    exit 0
fi

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC..."

        # dir can go away on reboots
        mkdir -p $WORKING_DIR
        chmod 775 $WORKING_DIR
        chown maradns:root $WORKING_DIR >/dev/null 2>&1 || true

	for rcfile in $SERVERS
        do
	    SERVERNAME=`echo $rcfile | sed 's/\//_/g;s/^_*//;' | awk -F. '{print $NF}'`
	    do_start
	    case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_progress_msg "$SERVERNAME" ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	    esac
        done
        [ "$VERBOSE" != no ] && log_end_msg 0
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC"
	for rcfile in $SERVERS
        do
	    SERVERNAME=`echo $rcfile | sed 's/\//_/g;s/^_*//;' | awk -F. '{print $NF}'`
	    do_stop
	    case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_process_msg "$SERVERNAME" ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	    esac
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
