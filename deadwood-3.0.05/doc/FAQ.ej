<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=utf-8">
</HEAD>
<BODY>
<H1>Deadwood FAQ</H1>

<h2>What is Deadwood?</h2>

Deadwood is the recursive DNS daemon (service) for the up and coming
MaraDNS 2.0.  MaraDNS 2.0 is going to have separate programs for
authoritative records (maradns) and recursive records (Deadwood).  
Deadwood is a standalone recursive server that can either be used
in conjunction with MaraDNS, or by itself.  The program can run
either in CentOS 5 (and hopefully other Linux and *NIX flavors) or
in Windows XP (as well as newer Windows releases).

<p>

The reason for this rewrite is because I have never been satisfied with
the recursive resolver in MaraDNS 1.0.  When I designed MaraDNS 1.0's
recursive resolver, there were a number of things needed to get full
recursion to work that I did not anticipate.  By the time I shoehorned
in all of the features needed in a fully recursive DNS server, the code
was rather messy and difficult to maintain.

<p>

Ever since 2002, my plan has been to rewrite MaraDNS' recursive code.  
In the fall of 2007, I finally started making the code; the code
became feature complete in the summer of 2010.

<h2>How do I use Deadwood?</h2>

Create a configuration file, <tt>/etc/dwood3rc</tt>, that looks like this:

<pre>
bind_address="127.0.0.1"
recursive_acl="127.0.0.1/8"
chroot_dir="/etc/deadwood"
</pre>

Now, create an empty directory owned by root called <tt>/etc/deadwood</tt>.  
Once this is done, compile Deadwood (as per INSTALL.txt), and see if it runs.  
The above configuration file will only allow connections using the loopback
interface on the same machine to resolve domains with Deadwood.

<h2>How do I convert a MaraDNS mararc file in to a Deadwood dwood3rc file?</h2>

While some effort has been made to have Deadwood use the same syntax and 
variables as MaraDNS, there are some differences to keep in mind:

<ul>

<li>Deadwood does not have a "ipv4_alias" parameter.  

<li>Deadwood handles "verbose_level" differently; to get fully verbose
    messages, "verbose_level" has to be 100 (as opposed to MaraDNS' 10)

</ul> 

<h2>I changed a configuration parameter but it has not affected Deadwood</h2>

Be sure to delete the cache file when making any changes to Deadwood's
configuration.  In Windows, the cache file is called dw_cache_bin (unless
the dwood3rc.txt file is edited); in CentOS, with the default dwood3rc file,
the file is called dw_cache.

<h2>Deadwood sends out a lot of queries</h2>

Deadwood will do this on a slow network, since the default parameters are
tuned to get a fast reply on a broadband internet connection.  On a slow
(dialup, saturated broadband, etc) connection, timeout_seconds should
have a value of 7 and num_retries should have a value of 1.  This is
done by adding the following lines to the dwood3rc file:

<pre>
timeout_seconds = 7
num_retries = 1
</pre>

<h2>Steve Gibson's DNS benchmark reports that Deadwood is dropping a lot of 
    DNS packets</h2>

After running this tool and carefully looking at Deadwood's replies to 
Gibson's DNS benchmark tool, I can safely conclude that Gibson's tool is
buggy and that Deadwood is not dropping the packets being sent to it.
<p>

A much better tool to use is Namebench, which correctly shows that Deadwood
drops very few (if any) DNS packets sent to it.  Namebench is available at
available at http://code.google.com/p/namebench/

<h2>Can Deadwood blacklist by domain?</h2>

Yes.
<p>

To blacklist a domain, add a line like this to the dwood3rc file:

<pre>
upstream_servers["example.com."] = "192.168.255.255"
</pre>

Replace "example.com." with the domain to be blacklisted, and replace 
"192.168.255.255" with an IP that is either:

<ul>

<li>Guaranteed to be unreachable from the server running Deadwood.  In this
    case, any attempt to reach a blacklisted domain will result in Deadwood
    timing out and eventually returning a "SERVER FAIL" error message.

<li>Running a DNS server that always returns the same IP to a given DNS
    query.  This can be set up by using "csv2_default_zonefile" in MaraDNS,
    running "microdns" (included in MaraDNS' source tree), or even by running 
    "nanodns".

</ul>

Deadwood uses a hash to store these blacklisted domains, and should be able
to store thousands of such domains without significant slowdown.
<p>

If it is more convenient to store the domains in separate files, this can be
done using Deadwood's "execfile" mechanism.

<h2>Does Deadwood have DNSSEC support?</h2>

No.  I have nothing against DNSSEC per se, but I plain simply am not in a
position to take the time and effort to implement DNSSEC without being
compensated for my work.

</BODY>
